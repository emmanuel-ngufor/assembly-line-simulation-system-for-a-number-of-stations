In completing this workshop, several STL functions were utilized to manage and manipulate collections of songs. Here's a detailed description of the topics covered and the STL functions employed:

1) STL Functions Used:

std::getline: This function is used to read lines from an input stream, which was used to read lines from the input file in the SongCollection::SongCollection constructor.
std::for_each: Utilized to apply a function to each element in a range. It was used to iterate over the song list in the SongCollection::display function to print each song.
std::sort: Employed to sort the collection of songs based on different fields such as title, album, or length. This function provides efficient sorting algorithms and was selected for its simplicity and performance.
std::find_if: Utilized to search for an element in a range that satisfies a given condition. It was used to check if a song by a specific artist exists in the collection in the SongCollection::inCollection function.
std::list::emplace_back: Used to construct and insert a new Song object at the end of the song list. This function constructs the object in place without unnecessary copies or moves.

2) Advantages of Using STL Algorithms vs. Implementing Functionality by Yourself:

Readability: STL algorithms often use descriptive names, making the code more readable and understandable.
Efficiency: STL algorithms are implemented with efficiency in mind and are optimized for performance.
Reduced Errors: Using standard algorithms reduces the likelihood of introducing bugs compared to writing custom loop implementations.
Code Reusability: STL algorithms are generic and can be used with different data types, promoting code reusability.


3) Redesigning the Sorting Function:

To prevent clients from specifying an invalid field for sorting, we can use an enum to represent the valid sorting options. This way, the compiler can detect any errors at compile time. Here's an example:

enum class SortField { Title, Artist, Album, Year, Length, Price };

void SongCollection::sort(SortField field) {
    switch (field) {
        case SortField::Title:
            std::sort(songList.begin(), songList.end(), [](Song* a, Song* b) {
                return a->m_title < b->m_title; 
            });
            break;
        case SortField::Artist:
            // Sort by artist
            break;
        // Add cases for other fields
        default:
            throw std::invalid_argument("Invalid sort field");
    }
}

By using an enum to represent the valid sorting options, any attempt to specify an invalid field will result in a compile-time error, providing better safety and error detection.

Summary
In summary, the workshop covered various aspects of using STL functions to manage collections of songs efficiently and safely. By leveraging standard algorithms and data structures provided by the STL, we were able to write concise, readable, and robust code for handling song collections.
